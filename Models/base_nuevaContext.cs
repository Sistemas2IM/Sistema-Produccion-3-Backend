// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Sistema_Produccion_3_Backend.Models;

public partial class base_nuevaContext : DbContext
{
    public base_nuevaContext()
    {
    }

    public base_nuevaContext(DbContextOptions<base_nuevaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<areas> areas { get; set; }

    public virtual DbSet<articuloOv> articuloOv { get; set; }

    public virtual DbSet<asignacion> asignacion { get; set; }

    public virtual DbSet<camposPersonalizados> camposPersonalizados { get; set; }

    public virtual DbSet<certificadoDeCalidad> certificadoDeCalidad { get; set; }

    public virtual DbSet<contenidoEntrega> contenidoEntrega { get; set; }

    public virtual DbSet<detalleCertificado> detalleCertificado { get; set; }

    public virtual DbSet<detalleEntrega> detalleEntrega { get; set; }

    public virtual DbSet<detalleFicha> detalleFicha { get; set; }

    public virtual DbSet<detalleReporte> detalleReporte { get; set; }

    public virtual DbSet<disenador> disenador { get; set; }

    public virtual DbSet<entregasProductoTerminado> entregasProductoTerminado { get; set; }

    public virtual DbSet<estadosOf> estadosOf { get; set; }

    public virtual DbSet<estadosReporte> estadosReporte { get; set; }

    public virtual DbSet<etiqueta> etiqueta { get; set; }

    public virtual DbSet<familliaDeMaquina> familliaDeMaquina { get; set; }

    public virtual DbSet<fichaTecnica> fichaTecnica { get; set; }

    public virtual DbSet<maquinas> maquinas { get; set; }

    public virtual DbSet<material> material { get; set; }

    public virtual DbSet<menu> menu { get; set; }

    public virtual DbSet<modulo> modulo { get; set; }

    public virtual DbSet<movimientoOf> movimientoOf { get; set; }

    public virtual DbSet<oV> oV { get; set; }

    public virtual DbSet<operaciones> operaciones { get; set; }

    public virtual DbSet<operador> operador { get; set; }

    public virtual DbSet<permiso> permiso { get; set; }

    public virtual DbSet<posturasOf> posturasOf { get; set; }

    public virtual DbSet<procesoOf> procesoOf { get; set; }

    public virtual DbSet<refreshToken> refreshToken { get; set; }

    public virtual DbSet<reportesDeOperadores> reportesDeOperadores { get; set; }

    public virtual DbSet<rol> rol { get; set; }

    public virtual DbSet<subModulo> subModulo { get; set; }

    public virtual DbSet<tablerosOf> tablerosOf { get; set; }

    public virtual DbSet<tarjetaCampo> tarjetaCampo { get; set; }

    public virtual DbSet<tarjetaOf> tarjetaOf { get; set; }

    public virtual DbSet<tipoCierre> tipoCierre { get; set; }

    public virtual DbSet<tipoReporte> tipoReporte { get; set; }

    public virtual DbSet<usuario> usuario { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=192.168.2.62;Initial Catalog=base_nueva;Persist Security Info=True;User ID=sa;Password=sa2; TrustServerCertificate=true");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<areas>(entity =>
        {
            entity.HasKey(e => e.idArea).HasName("PK_AREAS");

            entity.Property(e => e.nombreArea).IsFixedLength();
        });

        modelBuilder.Entity<articuloOv>(entity =>
        {
            entity.HasKey(e => e.idArticulo).HasName("PK_ARTICULOOV");

            entity.Property(e => e.articulo).IsFixedLength();
            entity.Property(e => e.departamento).IsFixedLength();
            entity.Property(e => e.lineaDeNegocio).IsFixedLength();
            entity.Property(e => e.unidad).IsFixedLength();

            entity.HasOne(d => d.idOvNavigation).WithMany(p => p.articuloOv).HasConstraintName("FK_ARTICULO_OV_ARTICU_OV");
        });

        modelBuilder.Entity<asignacion>(entity =>
        {
            entity.HasKey(e => e.idAsignacion).HasName("PK_ASIGNACION");

            entity.HasOne(d => d.idDisenadorNavigation).WithMany(p => p.asignacion).HasConstraintName("FK_ASIGNACI_DISENADOR_DISENADO");

            entity.HasOne(d => d.idTarjetaOfNavigation).WithMany(p => p.asignacion).HasConstraintName("FK_ASIGNACI_OF_ASIGNA_TARJETAO");
        });

        modelBuilder.Entity<camposPersonalizados>(entity =>
        {
            entity.HasKey(e => e.idCampo).HasName("PK_CAMPOSPERSONALIZADOS");

            entity.Property(e => e.tipo).IsFixedLength();
        });

        modelBuilder.Entity<certificadoDeCalidad>(entity =>
        {
            entity.HasKey(e => e.idCertificado).HasName("PK_CERTIFICADODECALIDAD");

            entity.Property(e => e.cliente).IsFixedLength();
            entity.Property(e => e.numeroFactura).IsFixedLength();
            entity.Property(e => e.producto).IsFixedLength();

            entity.HasOne(d => d.idTarjetaOfNavigation).WithMany(p => p.certificadoDeCalidad).HasConstraintName("FK_CERTIFIC_TARJETA_C_TARJETAO");
        });

        modelBuilder.Entity<contenidoEntrega>(entity =>
        {
            entity.HasKey(e => e.idContenidoEntrega).HasName("PK_CONTENIDOENTREGA");

            entity.Property(e => e.producto).IsFixedLength();

            entity.HasOne(d => d.idEntregaPtNavigation).WithMany(p => p.contenidoEntrega).HasConstraintName("FK_CONTENID_ENTREGA_C_ENTREGAS");
        });

        modelBuilder.Entity<detalleCertificado>(entity =>
        {
            entity.HasKey(e => e.idDetalleCertificado).HasName("PK_DETALLECERTIFICADO");

            entity.HasOne(d => d.idCertificadoNavigation).WithMany(p => p.detalleCertificado).HasConstraintName("FK_DETALLEC_CERTIFICA_CERTIFIC");
        });

        modelBuilder.Entity<detalleEntrega>(entity =>
        {
            entity.HasKey(e => e.idDetalleEtrega).HasName("PK_DETALLEENTREGA");

            entity.HasOne(d => d.idEntregaPtNavigation).WithMany(p => p.detalleEntrega).HasConstraintName("FK_DETALLEE_ENTREGADE_ENTREGAS");
        });

        modelBuilder.Entity<detalleFicha>(entity =>
        {
            entity.HasKey(e => e.idDetalleFicha).HasName("PK_DETALLEFICHA");

            entity.HasOne(d => d.idFichaTecnicaNavigation).WithMany(p => p.detalleFicha).HasConstraintName("FK_DETALLEF_FICHA_DET_FICHATEC");
        });

        modelBuilder.Entity<detalleReporte>(entity =>
        {
            entity.HasKey(e => e.idDetalle).HasName("PK_DETALLEREPORTE");

            entity.Property(e => e.cliente).IsFixedLength();
            entity.Property(e => e.tiroRetiro).IsFixedLength();

            entity.HasOne(d => d.idMaterialNavigation).WithMany(p => p.detalleReporte).HasConstraintName("FK_DETALLER_MATERIAL__MATERIAL");

            entity.HasOne(d => d.idOperacionNavigation).WithMany(p => p.detalleReporte).HasConstraintName("FK_DETALLER_OPERACION_OPERACIO");

            entity.HasOne(d => d.idReporteNavigation).WithMany(p => p.detalleReporte).HasConstraintName("FK_DETALLER_REPORTE_D_REPORTES");

            entity.HasOne(d => d.idTarjetaOfNavigation).WithMany(p => p.detalleReporte).HasConstraintName("FK_DETALLER_TARJETA_D_TARJETAO");

            entity.HasOne(d => d.idTipoCierreNavigation).WithMany(p => p.detalleReporte).HasConstraintName("FK_DETALLER_DETALLE_T_TIPOCIER");
        });

        modelBuilder.Entity<disenador>(entity =>
        {
            entity.HasKey(e => e.idDisenador).HasName("PK_DISENADOR");

            entity.Property(e => e.user).IsFixedLength();

            entity.HasOne(d => d.userNavigation).WithMany(p => p.disenador).HasConstraintName("FK_DISENADO_USUARIO_D_USUARIO");
        });

        modelBuilder.Entity<entregasProductoTerminado>(entity =>
        {
            entity.HasKey(e => e.idEntregaPt).HasName("PK_ENTREGASPRODUCTOTERMINADO");

            entity.Property(e => e.areaEntrega).IsFixedLength();
            entity.Property(e => e.areaRecibe).IsFixedLength();
            entity.Property(e => e.cliente).IsFixedLength();

            entity.HasOne(d => d.idEstadoReporteNavigation).WithMany(p => p.entregasProductoTerminado).HasConstraintName("FK_ENTREGAS_ESTADO_EN_ESTADOSR");

            entity.HasOne(d => d.idMaquinaNavigation).WithMany(p => p.entregasProductoTerminado).HasConstraintName("FK_ENTREGAS_MAQUINA_E_MAQUINAS");

            entity.HasOne(d => d.idOvNavigation).WithMany(p => p.entregasProductoTerminado).HasConstraintName("FK_ENTREGAS_OV_ENTREG_OV");

            entity.HasOne(d => d.idTarjetaOfNavigation).WithMany(p => p.entregasProductoTerminado).HasConstraintName("FK_ENTREGAS_TARJETA_E_TARJETAO");
        });

        modelBuilder.Entity<estadosOf>(entity =>
        {
            entity.HasKey(e => e.idEstadoOf).HasName("PK_ESTADOSOF");
        });

        modelBuilder.Entity<estadosReporte>(entity =>
        {
            entity.HasKey(e => e.idEstadoReporte).HasName("PK_ESTADOSREPORTE");
        });

        modelBuilder.Entity<etiqueta>(entity =>
        {
            entity.HasKey(e => e.idEtiqueta).HasName("PK_ETIQUETA");

            entity.Property(e => e.color).IsFixedLength();

            entity.HasOne(d => d.idTarjetaOfNavigation).WithMany(p => p.etiqueta).HasConstraintName("FK_ETIQUETA_TARJETA_E_TARJETAO");
        });

        modelBuilder.Entity<familliaDeMaquina>(entity =>
        {
            entity.HasKey(e => e.idFamilia).HasName("PK_FAMILLIADEMAQUINA");
        });

        modelBuilder.Entity<fichaTecnica>(entity =>
        {
            entity.HasKey(e => e.idFichaTecnica).HasName("PK_FICHATECNICA");

            entity.Property(e => e.cliente).IsFixedLength();
            entity.Property(e => e.producto).IsFixedLength();

            entity.HasOne(d => d.idTarjetaOfNavigation).WithMany(p => p.fichaTecnica).HasConstraintName("FK_FICHATEC_TARJETA_F_TARJETAO");
        });

        modelBuilder.Entity<maquinas>(entity =>
        {
            entity.HasKey(e => e.idMaquina).HasName("PK_MAQUINAS");

            entity.Property(e => e.nombreMaquina).IsFixedLength();

            entity.HasOne(d => d.idFamiliaNavigation).WithMany(p => p.maquinas).HasConstraintName("FK_MAQUINAS_FAMILIA_M_FAMILLIA");
        });

        modelBuilder.Entity<material>(entity =>
        {
            entity.HasKey(e => e.idMaterial).HasName("PK_MATERIAL");
        });

        modelBuilder.Entity<menu>(entity =>
        {
            entity.HasKey(e => e.idMenu).HasName("PK_MENU");

            entity.Property(e => e.icono).IsFixedLength();
            entity.Property(e => e.ruta).IsFixedLength();
        });

        modelBuilder.Entity<modulo>(entity =>
        {
            entity.HasKey(e => e.idModulo).HasName("PK_MODULO");

            entity.HasOne(d => d.idMenuNavigation).WithMany(p => p.modulo).HasConstraintName("FK_MODULO_MENU_MODU_MENU");
        });

        modelBuilder.Entity<movimientoOf>(entity =>
        {
            entity.HasKey(e => e.idMovimiento).HasName("PK_MOVIMIENTOOF");

            entity.Property(e => e.user).IsFixedLength();

            entity.HasOne(d => d.idTarjetaOfNavigation).WithMany(p => p.movimientoOf).HasConstraintName("FK_MOVIMIEN_TARJETA_M_TARJETAO");

            entity.HasOne(d => d.userNavigation).WithMany(p => p.movimientoOf).HasConstraintName("FK_MOVIMIEN_USUARIO_M_USUARIO");
        });

        modelBuilder.Entity<oV>(entity =>
        {
            entity.HasKey(e => e.idOv).HasName("PK_OV");

            entity.Property(e => e.cliente).IsFixedLength();
            entity.Property(e => e.codCliente).IsFixedLength();
            entity.Property(e => e.oV1).IsFixedLength();
            entity.Property(e => e.tipoOrden).IsFixedLength();
            entity.Property(e => e.vendedor).IsFixedLength();
        });

        modelBuilder.Entity<operaciones>(entity =>
        {
            entity.HasKey(e => e.idOperacion).HasName("PK_OPERACIONES");

            entity.HasOne(d => d.idMaquinaNavigation).WithMany(p => p.operaciones).HasConstraintName("FK_OPERACIO_MAQUINA_O_MAQUINAS");
        });

        modelBuilder.Entity<operador>(entity =>
        {
            entity.HasKey(e => e.idOperador).HasName("PK_OPERADOR");

            entity.Property(e => e.user).IsFixedLength();

            entity.HasOne(d => d.userNavigation).WithMany(p => p.operador).HasConstraintName("FK_OPERADOR_USUARIO_O_USUARIO");
        });

        modelBuilder.Entity<permiso>(entity =>
        {
            entity.HasKey(e => e.idPermiso).HasName("PK_PERMISO");

            entity.HasOne(d => d.idRolNavigation).WithMany(p => p.permiso).HasConstraintName("FK_PERMISO_ROL_PERMI_ROL");

            entity.HasOne(d => d.idSubModuloNavigation).WithMany(p => p.permiso).HasConstraintName("FK_PERMISO_SUBMODULO_SUBMODUL");
        });

        modelBuilder.Entity<posturasOf>(entity =>
        {
            entity.HasKey(e => e.idPostura).HasName("PK_POSTURASOF");

            entity.Property(e => e.nombrePostura).IsFixedLength();

            entity.HasOne(d => d.idTableroNavigation).WithMany(p => p.posturasOf).HasConstraintName("FK_POSTURAS_TABLEROS__TABLEROS");
        });

        modelBuilder.Entity<procesoOf>(entity =>
        {
            entity.HasKey(e => e.idProceso).HasName("PK_PROCESOOF");

            entity.HasOne(d => d.idPosturaNavigation).WithMany(p => p.procesoOf).HasConstraintName("FK_PROCESOO_POSTURA_P_POSTURAS");

            entity.HasOne(d => d.idTableroNavigation).WithMany(p => p.procesoOf).HasConstraintName("FK_PROCESOO_TABLERO_P_TABLEROS");

            entity.HasOne(d => d.idTarjetaOfNavigation).WithMany(p => p.procesoOf).HasConstraintName("FK_PROCESOO_TARJETA_P_TARJETAO");
        });

        modelBuilder.Entity<refreshToken>(entity =>
        {
            entity.HasKey(e => e.token).HasName("PK_REFRESHTOKEN");

            entity.Property(e => e.user).IsFixedLength();

            entity.HasOne(d => d.userNavigation).WithMany(p => p.refreshToken).HasConstraintName("FK_REFRESHT_USUARIO_T_USUARIO");
        });

        modelBuilder.Entity<reportesDeOperadores>(entity =>
        {
            entity.HasKey(e => e.idReporte).HasName("PK_REPORTESDEOPERADORES");

            entity.HasOne(d => d.idEstadoReporteNavigation).WithMany(p => p.reportesDeOperadores).HasConstraintName("FK_REPORTES_ESTADO_RE_ESTADOSR");

            entity.HasOne(d => d.idMaquinaNavigation).WithMany(p => p.reportesDeOperadores).HasConstraintName("FK_REPORTES_MAQUINA_R_MAQUINAS");

            entity.HasOne(d => d.idOperadorNavigation).WithMany(p => p.reportesDeOperadores).HasConstraintName("FK_REPORTES_OPERADOR__OPERADOR");

            entity.HasOne(d => d.idTipoReporteNavigation).WithMany(p => p.reportesDeOperadores).HasConstraintName("FK_REPORTES_TIPO_REPO_TIPOREPO");
        });

        modelBuilder.Entity<rol>(entity =>
        {
            entity.HasKey(e => e.idRol).HasName("PK_ROL");
        });

        modelBuilder.Entity<subModulo>(entity =>
        {
            entity.HasKey(e => e.idSubModulo).HasName("PK_SUBMODULO");

            entity.HasOne(d => d.idModuloNavigation).WithMany(p => p.subModulo).HasConstraintName("FK_SUBMODUL_MODULO_SU_MODULO");
        });

        modelBuilder.Entity<tablerosOf>(entity =>
        {
            entity.HasKey(e => e.idTablero).HasName("PK_TABLEROSOF");

            entity.Property(e => e.nombreTablero).IsFixedLength();

            entity.HasOne(d => d.idAreaNavigation).WithMany(p => p.tablerosOf).HasConstraintName("FK_TABLEROS_AREAS_TAB_AREAS");

            entity.HasOne(d => d.idMaquinaNavigation).WithMany(p => p.tablerosOf).HasConstraintName("FK_TABLEROS_MAQUINAS__MAQUINAS");
        });

        modelBuilder.Entity<tarjetaCampo>(entity =>
        {
            entity.HasKey(e => e.tcampoId).HasName("PK_TARJETACAMPO");

            entity.HasOne(d => d.idCampoNavigation).WithMany(p => p.tarjetaCampo).HasConstraintName("FK_TARJETAC_CAMPO_TAR_CAMPOSPE");

            entity.HasOne(d => d.idTarjetaOfNavigation).WithMany(p => p.tarjetaCampo).HasConstraintName("FK_TARJETAC_TARJETA_C_TARJETAO");
        });

        modelBuilder.Entity<tarjetaOf>(entity =>
        {
            entity.HasKey(e => e.idTarjetaOf).HasName("PK_TARJETAOF");

            entity.HasOne(d => d.idEstadoOfNavigation).WithMany(p => p.tarjetaOf).HasConstraintName("FK_TARJETAO_ESTADO_TA_ESTADOSO");

            entity.HasOne(d => d.idOvNavigation).WithMany(p => p.tarjetaOf).HasConstraintName("FK_TARJETAO_OV_TARJET_OV");

            entity.HasOne(d => d.idPosturaNavigation).WithMany(p => p.tarjetaOf).HasConstraintName("FK_TARJETAO_POSTURA___POSTURAS");
        });

        modelBuilder.Entity<tipoCierre>(entity =>
        {
            entity.HasKey(e => e.idTipoCierre).HasName("PK_TIPOCIERRE");
        });

        modelBuilder.Entity<tipoReporte>(entity =>
        {
            entity.HasKey(e => e.idTipoReporte).HasName("PK_TIPOREPORTE");
        });

        modelBuilder.Entity<usuario>(entity =>
        {
            entity.HasKey(e => e.user).HasName("PK_USUARIO");

            entity.Property(e => e.user).IsFixedLength();
            entity.Property(e => e.password).IsFixedLength();
            entity.Property(e => e.status).IsFixedLength();

            entity.HasOne(d => d.idRolNavigation).WithMany(p => p.usuario).HasConstraintName("FK_USUARIO_ROL_USUAR_ROL");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}