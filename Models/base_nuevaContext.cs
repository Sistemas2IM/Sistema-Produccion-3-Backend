// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Sistema_Produccion_3_Backend.Models;

public partial class base_nuevaContext : DbContext
{
    public base_nuevaContext(DbContextOptions<base_nuevaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<areas> areas { get; set; }

    public virtual DbSet<articuloOv> articuloOv { get; set; }

    public virtual DbSet<asignacion> asignacion { get; set; }

    public virtual DbSet<auditoriaDeCalidad> auditoriaDeCalidad { get; set; }

    public virtual DbSet<auditoriaDeProcesos> auditoriaDeProcesos { get; set; }

    public virtual DbSet<auditoriaDeProductos> auditoriaDeProductos { get; set; }

    public virtual DbSet<bitacora> bitacora { get; set; }

    public virtual DbSet<camposPersonalizados> camposPersonalizados { get; set; }

    public virtual DbSet<cargo> cargo { get; set; }

    public virtual DbSet<certificadoDeCalidad> certificadoDeCalidad { get; set; }

    public virtual DbSet<contenidoEntrega> contenidoEntrega { get; set; }

    public virtual DbSet<detalleBarniz> detalleBarniz { get; set; }

    public virtual DbSet<detalleCertificado> detalleCertificado { get; set; }

    public virtual DbSet<detalleEntrega> detalleEntrega { get; set; }

    public virtual DbSet<detalleGira> detalleGira { get; set; }

    public virtual DbSet<detalleImpresion> detalleImpresion { get; set; }

    public virtual DbSet<detalleOperacionProceso> detalleOperacionProceso { get; set; }

    public virtual DbSet<detallePegado> detallePegado { get; set; }

    public virtual DbSet<detalleReporte> detalleReporte { get; set; }

    public virtual DbSet<detalleSecado> detalleSecado { get; set; }

    public virtual DbSet<detalleTroquelado> detalleTroquelado { get; set; }

    public virtual DbSet<entregasProductoTerminado> entregasProductoTerminado { get; set; }

    public virtual DbSet<espacioColor> espacioColor { get; set; }

    public virtual DbSet<especificaciones> especificaciones { get; set; }

    public virtual DbSet<estadosOf> estadosOf { get; set; }

    public virtual DbSet<estadosReporte> estadosReporte { get; set; }

    public virtual DbSet<etiqueta> etiqueta { get; set; }

    public virtual DbSet<etiquetaOf> etiquetaOf { get; set; }

    public virtual DbSet<familliaDeMaquina> familliaDeMaquina { get; set; }

    public virtual DbSet<fichaTecnica> fichaTecnica { get; set; }

    public virtual DbSet<filtros> filtros { get; set; }

    public virtual DbSet<formulacionTintas> formulacionTintas { get; set; }

    public virtual DbSet<generalidadColor> generalidadColor { get; set; }

    public virtual DbSet<gira> gira { get; set; }

    public virtual DbSet<maquinas> maquinas { get; set; }

    public virtual DbSet<material> material { get; set; }

    public virtual DbSet<menu> menu { get; set; }

    public virtual DbSet<modulo> modulo { get; set; }

    public virtual DbSet<motorista> motorista { get; set; }

    public virtual DbSet<movimientoOf> movimientoOf { get; set; }

    public virtual DbSet<oV> oV { get; set; }

    public virtual DbSet<operaciones> operaciones { get; set; }

    public virtual DbSet<permiso> permiso { get; set; }

    public virtual DbSet<permisoMaquina> permisoMaquina { get; set; }

    public virtual DbSet<porcentajeDeAgua> porcentajeDeAgua { get; set; }

    public virtual DbSet<posturasOf> posturasOf { get; set; }

    public virtual DbSet<potenciaLamparaUv> potenciaLamparaUv { get; set; }

    public virtual DbSet<procesoBarniz> procesoBarniz { get; set; }

    public virtual DbSet<procesoImpresora> procesoImpresora { get; set; }

    public virtual DbSet<procesoOf> procesoOf { get; set; }

    public virtual DbSet<procesoPegadora> procesoPegadora { get; set; }

    public virtual DbSet<procesoTroqueladora> procesoTroqueladora { get; set; }

    public virtual DbSet<refreshToken> refreshToken { get; set; }

    public virtual DbSet<reporteDeAuditoria> reporteDeAuditoria { get; set; }

    public virtual DbSet<reportesDeOperadores> reportesDeOperadores { get; set; }

    public virtual DbSet<rol> rol { get; set; }

    public virtual DbSet<secuenciaDeColor> secuenciaDeColor { get; set; }

    public virtual DbSet<subModulo> subModulo { get; set; }

    public virtual DbSet<tablerosOf> tablerosOf { get; set; }

    public virtual DbSet<tarjetaCampo> tarjetaCampo { get; set; }

    public virtual DbSet<tarjetaEtiqueta> tarjetaEtiqueta { get; set; }

    public virtual DbSet<tarjetaOf> tarjetaOf { get; set; }

    public virtual DbSet<tipoAcabado> tipoAcabado { get; set; }

    public virtual DbSet<tipoCierre> tipoCierre { get; set; }

    public virtual DbSet<tipoDeObjetos> tipoDeObjetos { get; set; }

    public virtual DbSet<tipoFicha> tipoFicha { get; set; }

    public virtual DbSet<tipoPega> tipoPega { get; set; }

    public virtual DbSet<tipoPegado> tipoPegado { get; set; }

    public virtual DbSet<tipoPleca> tipoPleca { get; set; }

    public virtual DbSet<tipoReporte> tipoReporte { get; set; }

    public virtual DbSet<usuario> usuario { get; set; }

    public virtual DbSet<variablesDeAgua> variablesDeAgua { get; set; }

    public virtual DbSet<vehiculo> vehiculo { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<areas>(entity =>
        {
            entity.HasKey(e => e.idArea).HasName("PK_AREAS");
        });

        modelBuilder.Entity<articuloOv>(entity =>
        {
            entity.HasKey(e => e.idArticulo).HasName("PK_ARTICULOOV");

            entity.HasOne(d => d.oVNavigation).WithMany(p => p.articuloOv).HasConstraintName("FK_ARTICULO_OV");
        });

        modelBuilder.Entity<asignacion>(entity =>
        {
            entity.HasKey(e => e.idAsignacion).HasName("PK_ASIGNACION");

            entity.HasOne(d => d.idProcesoNavigation).WithMany(p => p.asignacion).HasConstraintName("FK_ASIGN_PROCESOO");

            entity.HasOne(d => d.userNavigation).WithMany(p => p.asignacion).HasConstraintName("FK_ASIGN_DISENADOR");
        });

        modelBuilder.Entity<auditoriaDeCalidad>(entity =>
        {
            entity.HasKey(e => e.idAuditoria).HasName("PK_AUDITORIADECALIDAD");

            entity.HasOne(d => d.userNavigation).WithMany(p => p.auditoriaDeCalidad).HasConstraintName("FK_AUDITOR");
        });

        modelBuilder.Entity<auditoriaDeProcesos>(entity =>
        {
            entity.HasKey(e => e.idAuditoriaDeProcesos).HasName("PK_AUDITORIADEPROCESOS");

            entity.Property(e => e.adhesivoCorrecto).IsFixedLength();
            entity.Property(e => e.aprobacionDeArranque).IsFixedLength();
            entity.Property(e => e.armadoDePieza).IsFixedLength();
            entity.Property(e => e.arranqueDeFibra).IsFixedLength();
            entity.Property(e => e.arteOPlotter).IsFixedLength();
            entity.Property(e => e.bobinaGolpeada).IsFixedLength();
            entity.Property(e => e.bolsaDeTrabajo).IsFixedLength();
            entity.Property(e => e.calibre).IsFixedLength();
            entity.Property(e => e.codigoDeBarra).IsFixedLength();
            entity.Property(e => e.contaminacion).IsFixedLength();
            entity.Property(e => e.corrugadoIdentificado).IsFixedLength();
            entity.Property(e => e.corrugadoSellado).IsFixedLength();
            entity.Property(e => e.curadoDeBarniz).IsFixedLength();
            entity.Property(e => e.delaminada).IsFixedLength();
            entity.Property(e => e.escuadra).IsFixedLength();
            entity.Property(e => e.fibra).IsFixedLength();
            entity.Property(e => e.fichaTecnica).IsFixedLength();
            entity.Property(e => e.guiaDeColor).IsFixedLength();
            entity.Property(e => e.guiaDeCorte).IsFixedLength();
            entity.Property(e => e.huellaTroquel).IsFixedLength();
            entity.Property(e => e.identificacionDeProducto).IsFixedLength();
            entity.Property(e => e.lecturaDeArte).IsFixedLength();
            entity.Property(e => e.malCortado).IsFixedLength();
            entity.Property(e => e.malOlor).IsFixedLength();
            entity.Property(e => e.matrizSegunCalibre).IsFixedLength();
            entity.Property(e => e.mecanicoODummy).IsFixedLength();
            entity.Property(e => e.pruebaDeCurado).IsFixedLength();
            entity.Property(e => e.referenciaImpresion).IsFixedLength();
            entity.Property(e => e.solicitudDeCorte).IsFixedLength();
            entity.Property(e => e.tamanoDeMateriaPrima).IsFixedLength();
            entity.Property(e => e.tarimaPlastificada).IsFixedLength();
            entity.Property(e => e.unidadesDeCorrugado).IsFixedLength();
            entity.Property(e => e.usoDeEspectro).IsFixedLength();

            entity.HasOne(d => d.idReporteAuditoriaNavigation).WithMany(p => p.auditoriaDeProcesos).HasConstraintName("FK__PROCESOS_REPORTE");
        });

        modelBuilder.Entity<auditoriaDeProductos>(entity =>
        {
            entity.HasKey(e => e.idAuditoriaDeProductos).HasName("PK_AUDITORIADEPRODUCTOS");

            entity.Property(e => e.ancho).IsFixedLength();
            entity.Property(e => e.banizDeficiente).IsFixedLength();
            entity.Property(e => e.basuras).IsFixedLength();
            entity.Property(e => e.brillos).IsFixedLength();
            entity.Property(e => e.calibre).IsFixedLength();
            entity.Property(e => e.cuadratura).IsFixedLength();
            entity.Property(e => e.despegado).IsFixedLength();
            entity.Property(e => e.doblado).IsFixedLength();
            entity.Property(e => e.engraseYVelo).IsFixedLength();
            entity.Property(e => e.expulse).IsFixedLength();
            entity.Property(e => e.fallosDeRegistro).IsFixedLength();
            entity.Property(e => e.faltanteDeSisa).IsFixedLength();
            entity.Property(e => e.faltanteDeTexto).IsFixedLength();
            entity.Property(e => e.foil).IsFixedLength();
            entity.Property(e => e.golpeDeHule).IsFixedLength();
            entity.Property(e => e.largo).IsFixedLength();
            entity.Property(e => e.malContado).IsFixedLength();
            entity.Property(e => e.malDoblado).IsFixedLength();
            entity.Property(e => e.manchasYMarcas).IsFixedLength();
            entity.Property(e => e.materiaPrimaCorrecta).IsFixedLength();
            entity.Property(e => e.medida).IsFixedLength();
            entity.Property(e => e.otro).IsFixedLength();
            entity.Property(e => e.pegadoDeCorte).IsFixedLength();
            entity.Property(e => e.perforado).IsFixedLength();
            entity.Property(e => e.pestanuda).IsFixedLength();
            entity.Property(e => e.planchaSegunColor).IsFixedLength();
            entity.Property(e => e.rayones).IsFixedLength();
            entity.Property(e => e.realzado).IsFixedLength();
            entity.Property(e => e.rebava).IsFixedLength();
            entity.Property(e => e.registroDeBarniz).IsFixedLength();
            entity.Property(e => e.repinte).IsFixedLength();
            entity.Property(e => e.reventado).IsFixedLength();
            entity.Property(e => e.roto).IsFixedLength();
            entity.Property(e => e.sinGrapa).IsFixedLength();
            entity.Property(e => e.sisaDefinida).IsFixedLength();
            entity.Property(e => e.sucio).IsFixedLength();
            entity.Property(e => e.variacionDeTono).IsFixedLength();

            entity.HasOne(d => d.idReporteAuditoriaNavigation).WithMany(p => p.auditoriaDeProductos).HasConstraintName("FK_PRODUCTOS_REPORTE");
        });

        modelBuilder.Entity<bitacora>(entity =>
        {
            entity.HasKey(e => e.idBitacora).HasName("PK_BITACORA");
        });

        modelBuilder.Entity<camposPersonalizados>(entity =>
        {
            entity.HasKey(e => e.idCampo).HasName("PK_CAMPOSPERSONALIZADOS");
        });

        modelBuilder.Entity<cargo>(entity =>
        {
            entity.HasKey(e => e.idCargo).HasName("PK_CARGO");
        });

        modelBuilder.Entity<certificadoDeCalidad>(entity =>
        {
            entity.HasKey(e => e.idCertificado).HasName("PK_CERTIFICADODECALIDAD");

            entity.HasOne(d => d.oFNavigation).WithMany(p => p.certificadoDeCalidad).HasConstraintName("FK_CERTIFIC_OF");
        });

        modelBuilder.Entity<contenidoEntrega>(entity =>
        {
            entity.HasKey(e => e.idContenidoEntrega).HasName("PK_CONTENIDOENTREGA");

            entity.HasOne(d => d.idEntregaPtNavigation).WithMany(p => p.contenidoEntrega).HasConstraintName("FK_CONTENI_ENTREGA");

            entity.HasOne(d => d.idMaquinaNavigation).WithMany(p => p.contenidoEntrega).HasConstraintName("FK_MAQUINA_ENTREGA");
        });

        modelBuilder.Entity<detalleBarniz>(entity =>
        {
            entity.HasKey(e => e.idBarniz).HasName("PK_DETALLEBARNIZ");

            entity.HasOne(d => d.idDetalleImpresionNavigation).WithMany(p => p.detalleBarniz).HasConstraintName("FK_DETALLE_BANIZ");
        });

        modelBuilder.Entity<detalleCertificado>(entity =>
        {
            entity.HasKey(e => e.idDetalleCertificado).HasName("PK_DETALLECERTIFICADO");

            entity.HasOne(d => d.idCaracteristaNavigation).WithMany(p => p.detalleCertificado).HasConstraintName("FK_ESPECIFICACION");

            entity.HasOne(d => d.idCertificadoNavigation).WithMany(p => p.detalleCertificado).HasConstraintName("FK_DETALLE_CERTIFIC");
        });

        modelBuilder.Entity<detalleEntrega>(entity =>
        {
            entity.HasKey(e => e.idDetalleEntrega).HasName("PK_DETALLEENTREGA");

            entity.HasOne(d => d.idEntregaPtNavigation).WithMany(p => p.detalleEntrega)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DETALLE_ENTREGA");

            entity.HasOne(d => d.numeroOFNavigation).WithMany(p => p.detalleEntrega).HasConstraintName("FK_NUMERO_OF");
        });

        modelBuilder.Entity<detalleGira>(entity =>
        {
            entity.HasKey(e => e.idDetalleGira).HasName("PK_DETALLEGIRA");

            entity.HasOne(d => d.idGiraNavigation).WithMany(p => p.detalleGira).HasConstraintName("FK_DETALLE_GIRA");

            entity.HasOne(d => d.oFNavigation).WithMany(p => p.detalleGira).HasConstraintName("FK_GIRA_OF");
        });

        modelBuilder.Entity<detalleImpresion>(entity =>
        {
            entity.HasKey(e => e.idDetalleImpresion).HasName("PK_DETALLEIMPRESION");

            entity.HasOne(d => d.idFichaTecnicaNavigation).WithMany(p => p.detalleImpresion).HasConstraintName("FK_DETALLE_IMP");
        });

        modelBuilder.Entity<detalleOperacionProceso>(entity =>
        {
            entity.HasKey(e => e.idDetalleOperacion).HasName("PK_DETALLEOPERACIONPROCESO");

            entity.HasOne(d => d.idOperacionNavigation).WithMany(p => p.detalleOperacionProceso).HasConstraintName("FK_DETALLEO_OPERACION");

            entity.HasOne(d => d.idProcesoNavigation).WithMany(p => p.detalleOperacionProceso).HasConstraintName("FK_DETALLE_O_PROCESO");
        });

        modelBuilder.Entity<detallePegado>(entity =>
        {
            entity.HasKey(e => e.idDetallePegado).HasName("PK_DETALLEPEGADO");

            entity.HasOne(d => d.idFichaTecnicaNavigation).WithMany(p => p.detallePegado).HasConstraintName("FK_DETALLE_PEG");
        });

        modelBuilder.Entity<detalleReporte>(entity =>
        {
            entity.HasKey(e => e.idDetalleReporte).HasName("PK_DETALLEREPORTE");

            entity.HasOne(d => d.idMaterialNavigation).WithMany(p => p.detalleReporte).HasConstraintName("FK_DETALLE_MATERIAL");

            entity.HasOne(d => d.idOperacionNavigation).WithMany(p => p.detalleReporte).HasConstraintName("FK_DETALLE_OPERACION");

            entity.HasOne(d => d.idProcesoNavigation).WithMany(p => p.detalleReporte).HasConstraintName("FK_R_PROCESOO");

            entity.HasOne(d => d.idReporteNavigation).WithMany(p => p.detalleReporte).HasConstraintName("FK_DETALLE_REPORTE");

            entity.HasOne(d => d.idTipoCierreNavigation).WithMany(p => p.detalleReporte).HasConstraintName("FK_DETALLE_TIPOCIERRE");

            entity.HasOne(d => d.oFNavigation).WithMany(p => p.detalleReporte).HasConstraintName("FK_DETALLE_OF");
        });

        modelBuilder.Entity<detalleSecado>(entity =>
        {
            entity.HasKey(e => e.idSecadoMaquina).HasName("PK_DETALLESECADO");

            entity.HasOne(d => d.idDetalleImpresionNavigation).WithMany(p => p.detalleSecado).HasConstraintName("FK_DETALLE_SEC");
        });

        modelBuilder.Entity<detalleTroquelado>(entity =>
        {
            entity.HasKey(e => e.idDetalleTroquelado).HasName("PK_DETALLETROQUELADO");

            entity.HasOne(d => d.idFichaTecnicaNavigation).WithMany(p => p.detalleTroquelado).HasConstraintName("FK_FICHA_TRO");
        });

        modelBuilder.Entity<entregasProductoTerminado>(entity =>
        {
            entity.HasKey(e => e.idEntregaPt).HasName("PK_ENTREGASPRODUCTOTERMINADO");

            entity.HasOne(d => d.idEstadoReporteNavigation).WithMany(p => p.entregasProductoTerminado).HasConstraintName("FK_ENTREGAS_ESTADO");

            entity.HasOne(d => d.idMaquinaNavigation).WithMany(p => p.entregasProductoTerminado).HasConstraintName("FK_ENTREGAS_MAQUINA");
        });

        modelBuilder.Entity<espacioColor>(entity =>
        {
            entity.HasKey(e => e.idEspacioColor).HasName("PK_ESPACIOCOLOR");

            entity.Property(e => e.tipoEspacioColor).IsFixedLength();

            entity.HasOne(d => d.idFormulacionTintaNavigation).WithMany(p => p.espacioColor).HasConstraintName("FK_TINTAS_CIE");
        });

        modelBuilder.Entity<especificaciones>(entity =>
        {
            entity.HasKey(e => e.idCaracterista).HasName("PK_ESPECIFICACIONES");
        });

        modelBuilder.Entity<estadosOf>(entity =>
        {
            entity.HasKey(e => e.idEstadoOf).HasName("PK_ESTADOSOF");
        });

        modelBuilder.Entity<estadosReporte>(entity =>
        {
            entity.HasKey(e => e.idEstadoReporte).HasName("PK_ESTADOSREPORTE");

            entity.HasOne(d => d.tipoReporteNavigation).WithMany(p => p.estadosReporte).HasConstraintName("FK_TIPO_REPORTE");
        });

        modelBuilder.Entity<etiqueta>(entity =>
        {
            entity.HasKey(e => e.idEtiqueta).HasName("PK_ETIQUETA");
        });

        modelBuilder.Entity<etiquetaOf>(entity =>
        {
            entity.HasKey(e => e.idEtiquetaOf).HasName("PK_ETIQUETAOF");

            entity.HasOne(d => d.idEtiquetaNavigation).WithMany(p => p.etiquetaOf).HasConstraintName("FK_ETIQUETAS");

            entity.HasOne(d => d.oFNavigation).WithMany(p => p.etiquetaOf).HasConstraintName("FK_ETIQUETA_OF");
        });

        modelBuilder.Entity<familliaDeMaquina>(entity =>
        {
            entity.HasKey(e => e.idFamilia).HasName("PK_FAMILLIADEMAQUINA");
        });

        modelBuilder.Entity<fichaTecnica>(entity =>
        {
            entity.HasKey(e => e.idFichaTecnica).HasName("PK_FICHATECNICA");

            entity.HasOne(d => d.idTipoFichaNavigation).WithMany(p => p.fichaTecnica).HasConstraintName("FK_TIPOFICHA");

            entity.HasOne(d => d.oFNavigation).WithMany(p => p.fichaTecnica).HasConstraintName("FK_FICHATEC_OF");
        });

        modelBuilder.Entity<filtros>(entity =>
        {
            entity.HasKey(e => e.idFiltro).HasName("PK_FILTROS");

            entity.HasOne(d => d.idDetalleImpresionNavigation).WithMany(p => p.filtros).HasConstraintName("FK_FILTROS");
        });

        modelBuilder.Entity<formulacionTintas>(entity =>
        {
            entity.HasKey(e => e.idFormulacionTinta).HasName("PK_FORMULACIONTINTAS");

            entity.HasOne(d => d.idDetalleImpresionNavigation).WithMany(p => p.formulacionTintas).HasConstraintName("FK_FORMULACION_TINTAS");
        });

        modelBuilder.Entity<generalidadColor>(entity =>
        {
            entity.HasKey(e => e.idGeneralidad).HasName("PK_GENERALIDADCOLOR");

            entity.HasOne(d => d.idEspacioColorNavigation).WithMany(p => p.generalidadColor).HasConstraintName("FK_COLOR_TINTA");
        });

        modelBuilder.Entity<gira>(entity =>
        {
            entity.HasKey(e => e.idGira).HasName("PK_GIRA");

            entity.HasOne(d => d.idMotoristaNavigation).WithMany(p => p.gira).HasConstraintName("FK_GIRA_MOTORISTA");

            entity.HasOne(d => d.idVehiculoNavigation).WithMany(p => p.gira).HasConstraintName("FK_GIRA_VEHICULO");
        });

        modelBuilder.Entity<maquinas>(entity =>
        {
            entity.HasKey(e => e.idMaquina).HasName("PK_MAQUINAS");

            entity.HasOne(d => d.idFamiliaNavigation).WithMany(p => p.maquinas).HasConstraintName("FK_MAQUINAS_FAMILIA");
        });

        modelBuilder.Entity<material>(entity =>
        {
            entity.HasKey(e => e.idMaterial).HasName("PK_MATERIAL");
        });

        modelBuilder.Entity<menu>(entity =>
        {
            entity.HasKey(e => e.idMenu).HasName("PK_MENU");
        });

        modelBuilder.Entity<modulo>(entity =>
        {
            entity.HasKey(e => e.idModulo).HasName("PK_MODULO");

            entity.HasOne(d => d.idMenuNavigation).WithMany(p => p.modulo).HasConstraintName("FK_MODULO_MENU");
        });

        modelBuilder.Entity<motorista>(entity =>
        {
            entity.HasKey(e => e.idMotorista).HasName("PK_MOTORISTA");
        });

        modelBuilder.Entity<movimientoOf>(entity =>
        {
            entity.HasKey(e => e.idMovimiento).HasName("PK_MOVIMIENTOOF");
        });

        modelBuilder.Entity<oV>(entity =>
        {
            entity.HasKey(e => e.oV1).HasName("PK_OV");

            entity.Property(e => e.oV1).ValueGeneratedNever();
        });

        modelBuilder.Entity<operaciones>(entity =>
        {
            entity.HasKey(e => e.idOperacion).HasName("PK_OPERACIONES");

            entity.HasOne(d => d.idMaquinaNavigation).WithMany(p => p.operaciones).HasConstraintName("FK_OPERACIO_MAQUINA");
        });

        modelBuilder.Entity<permiso>(entity =>
        {
            entity.HasKey(e => e.idPermiso).HasName("PK_PERMISO");

            entity.HasOne(d => d.idRolNavigation).WithMany(p => p.permiso)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PERMISO_ROL");

            entity.HasOne(d => d.idSubModuloNavigation).WithMany(p => p.permiso).HasConstraintName("FK_PERMISO_SUBMODULO");
        });

        modelBuilder.Entity<permisoMaquina>(entity =>
        {
            entity.HasKey(e => e.idPermisoMaquina).HasName("PK__permisoM__14AF841E56D0504E");

            entity.HasOne(d => d.maquinaNavigation).WithMany(p => p.permisoMaquina).HasConstraintName("FK_PERMISOS_MAQUINA");

            entity.HasOne(d => d.userNavigation).WithMany(p => p.permisoMaquina)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PERMISOS_MAQUINA_USUARIO");
        });

        modelBuilder.Entity<porcentajeDeAgua>(entity =>
        {
            entity.HasKey(e => e.idPorcentaje).HasName("PK_PORCENTAJEDEAGUA");

            entity.HasOne(d => d.idReporteAuditoriaNavigation).WithMany(p => p.porcentajeDeAgua).HasConstraintName("FK_PORCENTAJ_REPORTE");
        });

        modelBuilder.Entity<posturasOf>(entity =>
        {
            entity.HasKey(e => e.idPostura).HasName("PK_POSTURASOF");

            entity.HasOne(d => d.idTableroNavigation).WithMany(p => p.posturasOf).HasConstraintName("FK_POSTURAS_TABLEROS");
        });

        modelBuilder.Entity<potenciaLamparaUv>(entity =>
        {
            entity.HasKey(e => e.idPotencia).HasName("PK_POTENCIALAMPARAUV");

            entity.HasOne(d => d.idBarnizNavigation).WithMany(p => p.potenciaLamparaUv).HasConstraintName("FK_POTENCIAL_BARNIZ");
        });

        modelBuilder.Entity<procesoBarniz>(entity =>
        {
            entity.HasKey(e => e.idProcesoBarniz).HasName("PK__procesoB__CCBE84C9B64298A9");

            entity.Property(e => e.idProcesoBarniz).ValueGeneratedNever();

            entity.HasOne(d => d.idProcesoOfNavigation).WithMany(p => p.procesoBarniz).HasConstraintName("ProcesoOfBarniz");
        });

        modelBuilder.Entity<procesoImpresora>(entity =>
        {
            entity.HasKey(e => e.idProcesoImpresora).HasName("PK__procesoI__25D23D8CAAD19189");

            entity.Property(e => e.idProcesoImpresora).ValueGeneratedNever();

            entity.HasOne(d => d.idProcesoOfNavigation).WithMany(p => p.procesoImpresora).HasConstraintName("procesoOfImpresora");
        });

        modelBuilder.Entity<procesoOf>(entity =>
        {
            entity.HasKey(e => e.idProceso).HasName("PK_PROCESOOF");

            entity.ToTable(tb => tb.HasTrigger("trg_UpdateTarjetaOf"));

            entity.HasOne(d => d.idMaterialNavigation).WithMany(p => p.procesoOf).HasConstraintName("FK_PROCESO_MATERIAL");

            entity.HasOne(d => d.idPosturaNavigation).WithMany(p => p.procesoOf).HasConstraintName("FK_PROCESO_POSTURA_");

            entity.HasOne(d => d.idTableroNavigation).WithMany(p => p.procesoOf).HasConstraintName("FK_PROCESO_TABLERO");

            entity.HasOne(d => d.oFNavigation).WithMany(p => p.procesoOf).HasConstraintName("FK_PROCESO_OF");
        });

        modelBuilder.Entity<procesoPegadora>(entity =>
        {
            entity.HasKey(e => e.idProcesoPegadora).HasName("PK__procesoP__D3D0E7379AFBE3DA");

            entity.Property(e => e.idProcesoPegadora).ValueGeneratedNever();

            entity.HasOne(d => d.idProcesoOfNavigation).WithMany(p => p.procesoPegadora).HasConstraintName("ProcesoOfPegadora");
        });

        modelBuilder.Entity<procesoTroqueladora>(entity =>
        {
            entity.HasKey(e => e.idProcesoTroqueladora).HasName("PK__procesoT__5F41CDA6FB72ABB6");

            entity.Property(e => e.idProcesoTroqueladora).ValueGeneratedNever();

            entity.HasOne(d => d.idProcesoOfNavigation).WithMany(p => p.procesoTroqueladora).HasConstraintName("ProcesoOfTroqueladora");
        });

        modelBuilder.Entity<refreshToken>(entity =>
        {
            entity.HasKey(e => e.token).HasName("PK_REFRESHTOKEN");

            entity.HasOne(d => d.userNavigation).WithMany(p => p.refreshToken).HasConstraintName("FK_REFRESHT_USUARIO");
        });

        modelBuilder.Entity<reporteDeAuditoria>(entity =>
        {
            entity.HasKey(e => e.idReporteAuditoria).HasName("PK_REPORTEDEAUDITORIA");

            entity.Property(e => e.procesosArrelgo).IsFixedLength();
            entity.Property(e => e.tiroRetiro).IsFixedLength();

            entity.HasOne(d => d.idAuditoriaNavigation).WithMany(p => p.reporteDeAuditoria).HasConstraintName("FK_REPORTES_AUDIT");
        });

        modelBuilder.Entity<reportesDeOperadores>(entity =>
        {
            entity.HasKey(e => e.idReporte).HasName("PK_REPORTESDEOPERADORES");

            entity.HasOne(d => d.idEstadoReporteNavigation).WithMany(p => p.reportesDeOperadores).HasConstraintName("FK_REPORTES_ESTADO");

            entity.HasOne(d => d.idMaquinaNavigation).WithMany(p => p.reportesDeOperadores).HasConstraintName("FK_REPORTES_MAQUINA");

            entity.HasOne(d => d.idTipoReporteNavigation).WithMany(p => p.reportesDeOperadores).HasConstraintName("FK_REPORTES_TIPO");

            entity.HasOne(d => d.operadorNavigation).WithMany(p => p.reportesDeOperadores).HasConstraintName("FK_REPORTES_OPERADOR");
        });

        modelBuilder.Entity<rol>(entity =>
        {
            entity.HasKey(e => e.idRol).HasName("PK_ROL");
        });

        modelBuilder.Entity<secuenciaDeColor>(entity =>
        {
            entity.HasKey(e => e.idSecuencia).HasName("PK_SECUENCIADECOLOR");

            entity.HasOne(d => d.idDetalleImpresionNavigation).WithMany(p => p.secuenciaDeColor).HasConstraintName("FK_SECUENCIA_COLOR");
        });

        modelBuilder.Entity<subModulo>(entity =>
        {
            entity.HasKey(e => e.idSubModulo).HasName("PK_SUBMODULO");

            entity.HasOne(d => d.idModuloNavigation).WithMany(p => p.subModulo).HasConstraintName("FK_SUBMODUL_MODULO");
        });

        modelBuilder.Entity<tablerosOf>(entity =>
        {
            entity.HasKey(e => e.idTablero).HasName("PK_TABLEROSOF");

            entity.HasOne(d => d.idAreaNavigation).WithMany(p => p.tablerosOf).HasConstraintName("FK_TABLEROS_AREAS");

            entity.HasOne(d => d.idMaquinaNavigation).WithMany(p => p.tablerosOf).HasConstraintName("FK_TABLEROS_MAQUINA");
        });

        modelBuilder.Entity<tarjetaCampo>(entity =>
        {
            entity.HasKey(e => e.idCamposTarjeta).HasName("PK_TARJETACAMPO");

            entity.HasOne(d => d.idCampoNavigation).WithMany(p => p.tarjetaCampo).HasConstraintName("FK_CAMPO_TARJETA");

            entity.HasOne(d => d.idProcesoNavigation).WithMany(p => p.tarjetaCampo).HasConstraintName("FK_TARJETAC_TARJETA");
        });

        modelBuilder.Entity<tarjetaEtiqueta>(entity =>
        {
            entity.HasKey(e => e.idTarjetaEtiqueta).HasName("PK_TARJETAETIQUETA");

            entity.HasOne(d => d.idEtiquetaNavigation).WithMany(p => p.tarjetaEtiqueta).HasConstraintName("FK_TARJETA_ETIQUETAS");

            entity.HasOne(d => d.idProcesoNavigation).WithMany(p => p.tarjetaEtiqueta).HasConstraintName("FK_TARJETAE_TARJETAS");
        });

        modelBuilder.Entity<tarjetaOf>(entity =>
        {
            entity.HasKey(e => e.oF).HasName("PK_TARJETAOF");

            entity.Property(e => e.oF).ValueGeneratedNever();

            entity.HasOne(d => d.idEstadoOfNavigation).WithMany(p => p.tarjetaOf).HasConstraintName("FK_TARJETA_ESTADO");
        });

        modelBuilder.Entity<tipoAcabado>(entity =>
        {
            entity.HasKey(e => e.idTipoAcabado).HasName("PK_TIPOACABADO");

            entity.HasOne(d => d.idDetalleTroqueladoNavigation).WithMany(p => p.tipoAcabado).HasConstraintName("FK_TIPOACABADO_TROQUEL");
        });

        modelBuilder.Entity<tipoCierre>(entity =>
        {
            entity.HasKey(e => e.idTipoCierre).HasName("PK_TIPOCIERRE");
        });

        modelBuilder.Entity<tipoDeObjetos>(entity =>
        {
            entity.HasKey(e => e.idTipoDeObjetos).HasName("PK_TIPODEOBJETOS");
        });

        modelBuilder.Entity<tipoFicha>(entity =>
        {
            entity.HasKey(e => e.idTipoFicha).HasName("PK_TIPOFICHA");
        });

        modelBuilder.Entity<tipoPega>(entity =>
        {
            entity.HasKey(e => e.idTipoPega).HasName("PK_TIPOPEGA");

            entity.HasOne(d => d.idDetallePegadoNavigation).WithMany(p => p.tipoPega).HasConstraintName("FK_TIPO_PEGADO");
        });

        modelBuilder.Entity<tipoPegado>(entity =>
        {
            entity.HasKey(e => e.idTipoPegado).HasName("PK_TIPOPEGADO");

            entity.HasOne(d => d.idDetallePegadoNavigation).WithMany(p => p.tipoPegado).HasConstraintName("FK_TIPO_PEGA");
        });

        modelBuilder.Entity<tipoPleca>(entity =>
        {
            entity.HasKey(e => e.idTipoPleca).HasName("PK_TIPOPLECA");

            entity.HasOne(d => d.idDetalleTroqueladoNavigation).WithMany(p => p.tipoPleca).HasConstraintName("FK_TIPOPLECA_TRO");
        });

        modelBuilder.Entity<tipoReporte>(entity =>
        {
            entity.HasKey(e => e.idTipoReporte).HasName("PK_TIPOREPORTE");
        });

        modelBuilder.Entity<usuario>(entity =>
        {
            entity.HasKey(e => e.user).HasName("PK_USUARIO");

            entity.HasOne(d => d.idAreaNavigation).WithMany(p => p.usuario).HasConstraintName("FK_USUARIO_AREA");

            entity.HasOne(d => d.idCargoNavigation).WithMany(p => p.usuario).HasConstraintName("FK_USUARIO_CARGO");

            entity.HasOne(d => d.idRolNavigation).WithMany(p => p.usuario).HasConstraintName("FK_USUARIO_ROL");
        });

        modelBuilder.Entity<variablesDeAgua>(entity =>
        {
            entity.HasKey(e => e.idVariables).HasName("PK_VARIABLESDEAGUA");

            entity.HasOne(d => d.idReporteAuditoriaNavigation).WithMany(p => p.variablesDeAgua).HasConstraintName("FK_VARIABLES_REPORTE");
        });

        modelBuilder.Entity<vehiculo>(entity =>
        {
            entity.HasKey(e => e.idVehiculo).HasName("PK_VEHICULO");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}